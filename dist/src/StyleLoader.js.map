{"version":3,"file":"StyleLoader.js","sourceRoot":"","sources":["../../src/StyleLoader.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAkB,MAAM,iBAAiB,CAAC;AAErE,MAAM,cAAc,GAAG,gDAAgD,CAAC;AAExE,MAAM,CAAC,OAAO,OAAO,WAAW;IAC9B,YAAmB,KAAqB;QAArB,UAAK,GAAL,KAAK,CAAgB;QACtC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED,KAAK,CAAC,UAAU;QACd,MAAM,QAAQ,GAAG,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAChD,MAAM,aAAa,GAAY,IAAI,CAAC,aAAa,EAAE,CAAC;QACpD,IAAI,CAAC,aAAa,EAAE;YAClB,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;YACjC,MAAM,IAAI,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;SAC3D;IACH,CAAC;IAED;;;SAGK;IACL,kBAAkB,CAAC,aAA4B;QAC7C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,uBAAuB,GAAG,CAAC,SAAS,GAAG,CAAC,EAAE,EAAE;gBAChD,IAAI,aAAa,EAAE;oBAAE,OAAO,OAAO,EAAE,CAAC;gBACtC,IAAI,SAAS,GAAG,EAAE,EAAE;oBAClB,MAAM,KAAK,CAAC,6DAA6D,CAAC,CAAC;oBAC3E,MAAM,EAAE,CAAC;iBACV;gBACD,UAAU,CAAC,GAAG,EAAE,CAAC,uBAAuB,CAAC,SAAS,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;YAC9D,CAAC,CAAC;YACF,uBAAuB,EAAE,CAAC;QAC5B,CAAC,CAAC,CAAC;IACL,CAAC;IAED,aAAa;QACX,MAAM,iBAAiB,GAAyB,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACpG,OAAO,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,MAAM,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IAC5F,CAAC;IAED,iBAAiB,CAAC,QAAgB;QAChC,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QACjD,SAAS,CAAC,GAAG,GAAG,YAAY,CAAC;QAC7B,SAAS,CAAC,IAAI,GAAG,UAAU,CAAC;QAC5B,SAAS,CAAC,IAAI,GAAG,QAAQ,CAAC;QAC1B,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IAClC,CAAC;CACF","sourcesContent":["import { getStyleRepository, FlatpickrTheme } from './styles/Themes';\n\nconst themeUrlPrefix = 'https://npmcdn.com/flatpickr@4.6.9/dist/themes';\n\nexport default class StyleLoader {\n  constructor(public theme: FlatpickrTheme) {\n    this.theme = theme;\n  }\n\n  async initStyles(): Promise<void> {\n    const themeUrl = getStyleRepository(this.theme);\n    const themeIsLoaded: boolean = this.isThemeLoaded();\n    if (!themeIsLoaded) {\n      this.appendThemeStyles(themeUrl);\n      await this.waitForStyleToLoad(() => this.isThemeLoaded());\n    }\n  }\n\n  /**\n   * We want to prevent the styles from flickering, so we halt the\n   * initialization process until the styles have been loaded\n   * */\n  waitForStyleToLoad(checkFunction: () => boolean): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const checkIfStylesHaveLoaded = (iteration = 0) => {\n        if (checkFunction()) return resolve();\n        if (iteration > 10) {\n          throw Error('Styles took too long to load, or were not able to be loaded');\n          reject();\n        }\n        setTimeout(() => checkIfStylesHaveLoaded(iteration++), 100);\n      };\n      checkIfStylesHaveLoaded();\n    });\n  }\n\n  isThemeLoaded(): boolean {\n    const styleSheetSources: Array<string | null> = Array.from(document.styleSheets).map(ss => ss.href);\n    return styleSheetSources.some(sss => sss != null && new RegExp(themeUrlPrefix).test(sss));\n  }\n\n  appendThemeStyles(themeUrl: string): void {\n    const styleElem = document.createElement('link');\n    styleElem.rel = 'stylesheet';\n    styleElem.type = 'text/css';\n    styleElem.href = themeUrl;\n    document.head.append(styleElem);\n  }\n}\n"]}