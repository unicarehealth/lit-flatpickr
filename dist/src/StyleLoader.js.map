{"version":3,"file":"StyleLoader.js","sourceRoot":"","sources":["../../src/StyleLoader.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAkB,MAAM,iBAAiB,CAAC;AAErE,MAAM,cAAc,GAAG,gDAAgD,CAAC;AAExE,MAAM,CAAC,OAAO,OAAO,WAAW;IAC9B,YAAmB,KAAqB;QAArB,UAAK,GAAL,KAAK,CAAgB;QACtC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED,KAAK,CAAC,UAAU;QACd,MAAM,QAAQ,GAAG,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAChD,MAAM,aAAa,GAAY,IAAI,CAAC,aAAa,EAAE,CAAC;QACpD,IAAI,CAAC,aAAa,EAAE;YAClB,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;YACjC,MAAM,IAAI,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;SAC3D;IACH,CAAC;IAED;;;SAGK;IACL,kBAAkB,CAAC,aAAuB;QACxC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,uBAAuB,GAAG,CAAC,SAAS,GAAG,CAAC,EAAE,EAAE;gBAChD,IAAI,aAAa,EAAE;oBAAE,OAAO,OAAO,EAAE,CAAC;gBACtC,IAAI,SAAS,GAAG,EAAE,EAAE;oBAClB,MAAM,KAAK,CAAC,6DAA6D,CAAC,CAAC;oBAC3E,MAAM,EAAE,CAAC;iBACV;gBACD,UAAU,CAAC,GAAG,EAAE,CAAC,uBAAuB,CAAC,SAAS,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;YAC9D,CAAC,CAAC;YACF,uBAAuB,EAAE,CAAC;QAC5B,CAAC,CAAC,CAAC;IACL,CAAC;IAED,aAAa;QACX,MAAM,iBAAiB,GAAyB,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACpG,OAAO,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,MAAM,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IAC5F,CAAC;IAED,iBAAiB,CAAC,QAAgB;QAChC,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QACjD,SAAS,CAAC,GAAG,GAAG,YAAY,CAAC;QAC7B,SAAS,CAAC,IAAI,GAAG,UAAU,CAAC;QAC5B,SAAS,CAAC,IAAI,GAAG,QAAQ,CAAC;QAC1B,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IAClC,CAAC;CACF","sourcesContent":["import { getStyleRepository, FlatpickrTheme } from './styles/Themes';\r\n\r\nconst themeUrlPrefix = 'https://npmcdn.com/flatpickr@4.6.6/dist/themes';\r\n\r\nexport default class StyleLoader {\r\n  constructor(public theme: FlatpickrTheme) {\r\n    this.theme = theme;\r\n  }\r\n\r\n  async initStyles(): Promise<void> {\r\n    const themeUrl = getStyleRepository(this.theme);\r\n    const themeIsLoaded: boolean = this.isThemeLoaded();\r\n    if (!themeIsLoaded) {\r\n      this.appendThemeStyles(themeUrl);\r\n      await this.waitForStyleToLoad(() => this.isThemeLoaded());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * We want to prevent the styles from flickering, so we halt the\r\n   * initialization process until the styles have been loaded\r\n   * */\r\n  waitForStyleToLoad(checkFunction: Function): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      const checkIfStylesHaveLoaded = (iteration = 0) => {\r\n        if (checkFunction()) return resolve();\r\n        if (iteration > 10) {\r\n          throw Error('Styles took too long to load, or were not able to be loaded');\r\n          reject();\r\n        }\r\n        setTimeout(() => checkIfStylesHaveLoaded(iteration++), 100);\r\n      };\r\n      checkIfStylesHaveLoaded();\r\n    });\r\n  }\r\n\r\n  isThemeLoaded(): boolean {\r\n    const styleSheetSources: Array<string | null> = Array.from(document.styleSheets).map(ss => ss.href);\r\n    return styleSheetSources.some(sss => sss != null && new RegExp(themeUrlPrefix).test(sss));\r\n  }\r\n\r\n  appendThemeStyles(themeUrl: string): void {\r\n    const styleElem = document.createElement('link');\r\n    styleElem.rel = 'stylesheet';\r\n    styleElem.type = 'text/css';\r\n    styleElem.href = themeUrl;\r\n    document.head.append(styleElem);\r\n  }\r\n}\r\n"]}