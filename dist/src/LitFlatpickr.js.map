{"version":3,"file":"LitFlatpickr.js","sourceRoot":"","sources":["../../src/LitFlatpickr.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, LitElement, TemplateResult, css, CSSResultArray } from 'lit';\nimport { customElement, property, state } from 'lit/decorators';\nimport 'flatpickr';\nimport { FlatpickrTheme } from './styles/Themes';\nimport StyleLoader from './StyleLoader';\nimport { DateLimit, DateOption, Options, ParsedOptions } from 'flatpickr/dist/types/options';\nimport { Locale } from 'flatpickr/dist/types/locale';\nimport { Instance as FlatpickrInstance } from 'flatpickr/dist/types/instance';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const flatpickr: any;\n\n@customElement('lit-flatpickr')\nexport class LitFlatpickr extends LitElement {\n  /**\n   * Exactly the same as date format, but for the altInput field\n   * @prop\n   * @type string\n   **/\n  @property({ type: String })\n  altFormat = 'F j, Y';\n  /**\n   * Show the user a readable date (as per altFormat), but return something totally different to the server.\n   * @prop\n   * @type boolean\n   * */\n  @property({ type: Boolean })\n  altInput = false;\n  /**\n   * This class will be added to the input element created by the altInput option.\n   * Note that altInput already inherits classes from the original input.\n   * @prop\n   * @type string\n   * */\n  @property({ type: String })\n  altInputClass = '';\n  /**\n   * Allows the user to enter a date directly input the input field. By default, direct entry is disabled.\n   * @prop\n   * @type boolean\n   **/\n  @property({ type: Boolean })\n  allowInput = false;\n  /**\n   * Defines how the date will be formatted in the aria-label for calendar days, using the same tokens as dateFormat.\n   * If you change this, you should choose a value that will make sense if a screen reader reads it out loud\n   * @prop\n   * @type string\n   **/\n  @property({ type: String })\n  ariaDateFormat = 'F j, Y';\n\n  /**\n   * Whether clicking on the input should open the picker.\n   * You could disable this if you wish to open the calendar manually with.open()\n   * @prop\n   * @type boolean\n   * */\n  @property({ type: Boolean })\n  clickOpens = true;\n\n  /**\n   * A string of characters which are used to define how the date will be displayed in the input box.\n   * @prop\n   * @type string\n   * */\n  @property({ type: String })\n  dateFormat = 'Y-m-d';\n\n  /**\n   * Sets the initial selected date(s).\n   *\n   * If you're using mode: \"multiple\" or a range calendar supply an Array of\n   * Date objects or an Array of date strings which follow your dateFormat.\n   *\n   * Otherwise, you can supply a single Date object or a date string.\n   * @prop\n   * @type {DateOption|DateOption[]}\n   * */\n  @property({ type: String })\n  defaultDate?: DateOption | DateOption[];\n\n  /**\n   * Initial value of the hour element.\n   * @prop\n   * @type number\n   * */\n  @property({ type: Number })\n  defaultHour = 12;\n\n  /**\n   * Initial value of the minute element.\n   * @prop\n   * @type number\n   * */\n  @property({ type: Number })\n  defaultMinute = 0;\n\n  /**\n   * Dates selected to be unavailable for selection.\n   * @prop\n   * @type DateLimit<DateOption>[]\n   * */\n  @property({ type: Array })\n  disable: DateLimit<DateOption>[] = [];\n\n  /**\n   * Set disableMobile to true to always use the non-native picker.\n   * By default, flatpickr utilizes native datetime widgets unless certain options (e.g. disable) are used.\n   * @prop\n   * @type boolean\n   * */\n  @property({ type: Boolean })\n  disableMobile = false;\n\n  /**\n   * Dates selected to be available for selection.\n   * @prop\n   * @type DateLimit<DateOption>[]\n   * */\n  @property({ type: Array })\n  enable: DateLimit<DateOption>[] = [];\n\n  /**\n   * Enables time picker\n   * @prop\n   * @type boolean\n   * */\n  @property({ type: Boolean })\n  enableTime = false;\n\n  /**\n   * Enables seconds in the time picker\n   * @prop\n   * @type boolean\n   * */\n  @property({ type: Boolean })\n  enableSeconds = false;\n\n  /**\n   * Allows using a custom date formatting function instead of the built-in\n   * handling for date formats using dateFormat, altFormat, etc.\n   *\n   * Function format: (date: Date, format: string, locale: Locale) => string\n   *\n   * @prop\n   * @type Function\n   * */\n  @property({ attribute: false })\n  formatDateFn?: (date: Date, format: string, locale: Locale) => string;\n\n  /**\n   * Adjusts the step for the hour input (incl. scrolling)\n   * @prop\n   * @type number\n   * */\n  @property({ type: Number })\n  hourIncrement = 1;\n\n  /**\n   * Adjusts the step for the minute input (incl. scrolling)\n   * @prop\n   * @type number\n   * */\n  @property({ type: Number })\n  minuteIncrement = 5;\n\n  /**\n   * Displays the calendar inline\n   * @prop\n   * @type boolean\n   * */\n  @property({ type: Boolean })\n  inline = false;\n\n  /**\n   * The maximum date that a user can pick to (inclusive).\n   * @prop\n   * @type DateOption\n   * */\n  @property({ type: String })\n  maxDate?: DateOption;\n\n  /**\n   * The minimum date that a user can pick to (inclusive).\n   * @prop\n   * @type DateOption\n   * */\n  @property({ type: String })\n  minDate?: DateOption;\n\n  /**\n   * \"single\", \"multiple\", or \"range\"\n   * @prop\n   * @type {\"single\" | \"multiple\" | \"range\"}\n   * */\n  @property({ type: String })\n  mode: 'single' | 'multiple' | 'range' | 'time' = 'single';\n\n  /**\n   * HTML for the arrow icon, used to switch months.\n   * @prop\n   * @type string\n   * */\n  @property({ type: String })\n  nextArrow = '>';\n\n  /**\n   * HTML for the arrow icon, used to switch months.\n   * @prop\n   * @type string\n   * */\n  @property({ type: String })\n  prevArrow = '<';\n\n  /**\n   * Hides the day selection in calendar.\n   * Use it along with enableTime to create a time picker.\n   * @prop\n   * @type boolean\n   * */\n  @property({ type: Boolean })\n  noCalendar = false;\n\n  /**\n   * Function that expects a date string and must return a Date object.\n   *\n   * Function format: (date: string, format: string) => string\n   *\n   * @prop\n   * @type Function\n   **/\n  @property({ type: Object })\n  parseDateFn?: (date: string, format: string) => Date;\n\n  /**\n   * Where the calendar is rendered relative to the input\n   * @prop\n   * @type {\"auto\" | \"above\" | \"below\"}\n   * */\n  @property({ type: String })\n  position: 'auto' | 'above' | 'below' = 'auto';\n\n  /**\n   * Show the month using the shorthand version (ie, Sep instead of September)\n   * @prop\n   * @type boolean\n   * */\n  @property({ type: Boolean })\n  shorthandCurrentMonth = false;\n\n  /**\n   * The number of months showed\n   * @prop\n   * @type number\n   * */\n  @property({ type: Number })\n  showMonths = 1;\n\n  /**\n   * Position the calendar inside the wrapper and next to the input element\n   * @prop\n   * @type boolean\n   **/\n  @property({ type: Boolean })\n  static = false;\n\n  /**\n   * Displays the time picker in 24 hour mode without AM/PM selection when enabled\n   * @prop\n   * @type boolean\n   * */\n  @property({ type: Boolean })\n  time_24hr = false;\n\n  /**\n   * Enabled display of week numbers in calendar\n   * @prop\n   * @type boolean\n   * */\n  @property({ type: Boolean })\n  weekNumbers = false;\n\n  /**\n   * flatpickr can parse an input group of textboxes and buttons, common in Bootstrap and other frameworks.\n   * This permits additional markup, as well as custom elements to trigger the state of the calendar.\n   * @prop\n   * @type boolean\n   * */\n  @property({ type: Boolean })\n  wrap = false;\n\n  /**\n   * The set theme of flatpickr.\n   * @prop\n   * @type { \"light\" | \"dark\" | \"material_blue\" | \"material_red\" | \"material_green\" | \"material_orange\" | \"airbnb\" | \"confetti\" }\n   * */\n  @property({ type: String })\n  theme:\n    | 'light'\n    | 'dark'\n    | 'material_blue'\n    | 'material_red'\n    | 'material_green'\n    | 'material_orange'\n    | 'airbnb'\n    | 'confetti' = 'light';\n\n  @state()\n  _hasSlottedElement = false;\n\n  _styleInitialized = false;\n\n  _instance?: FlatpickrInstance;\n\n  static get styles(): CSSResultArray {\n    return [\n      css`\n        :host {\n          width: fit-content;\n          display: block;\n          cursor: text;\n          background: #fff;\n          color: #000;\n          overflow: hidden;\n        }\n\n        input {\n          width: 100%;\n          height: 100%;\n          font-size: inherit;\n          cursor: inherit;\n          background: inherit;\n          box-sizing: border-box;\n          outline: none;\n          color: inherit;\n          border: none;\n        }\n      `,\n    ];\n  }\n\n  async firstUpdated(): Promise<void> {\n    this._hasSlottedElement = this.checkForSlottedElement();\n  }\n\n  async updated(changedProperties: Map<string | number | symbol, unknown>): Promise<void> {\n    let refreshStyles = !this._styleInitialized; //Initialise styles at startup, then only if 'theme' property changes.\n    let refreshInstance = this._instance === undefined; //Initialise flatpickr instance at startup, then only if we can't set the changed option on it.\n\n    if (!refreshStyles) {\n      changedProperties.forEach((oldValue, propName) => {\n        if (!refreshStyles && propName === 'theme' && this.theme !== oldValue) {\n          refreshStyles = true;\n        }\n\n        if (!refreshInstance && propName === 'defaultDate' && this.defaultDate !== oldValue) {\n          this._instance?.set('defaultDate', this.defaultDate);\n          refreshInstance = false;\n        }\n        // TODO: Continue to handle changed properties using set() so not initialised every time updated.\n      });\n    }\n\n    if (refreshStyles) {\n      const styleLoader = new StyleLoader(this.theme as FlatpickrTheme);\n      await styleLoader.initStyles();\n      this._styleInitialized = true;\n    }\n\n    if (refreshInstance) {\n      await this.initializeComponent();\n    }\n  }\n\n  checkForSlottedElement(): boolean {\n    const slottedElem = this.shadowRoot?.querySelector('slot');\n    // We don't want to think that a whitespace / line break is a node\n    const assignedNodes = slottedElem ? slottedElem.assignedNodes().filter(this.removeTextNodes) : [];\n\n    return assignedNodes.length > 0;\n  }\n\n  getSlottedElement(): Element | undefined {\n    if (!this._hasSlottedElement) {\n      return undefined;\n    }\n    const slottedElem = this.shadowRoot?.querySelector('slot');\n    const slottedElemNodes: Array<Node> | undefined = slottedElem?.assignedNodes().filter(this.removeTextNodes);\n    if (!slottedElemNodes || slottedElemNodes.length < 1) {\n      return undefined;\n    }\n    return slottedElemNodes[0] as Element;\n  }\n\n  removeTextNodes(node: Node): boolean {\n    return node.nodeName !== '#text';\n  }\n\n  getOptions(): Options {\n    return {\n      altFormat: this.altFormat,\n      altInput: this.altInput,\n      altInputClass: this.altInputClass,\n      allowInput: this.allowInput,\n      ariaDateFormat: this.ariaDateFormat,\n      clickOpens: this.clickOpens,\n      dateFormat: this.dateFormat,\n      defaultDate: this.defaultDate,\n      defaultHour: this.defaultHour,\n      defaultMinute: this.defaultMinute,\n      disable: this.disable,\n      disableMobile: this.disableMobile,\n      enable: this.enable,\n      enableTime: this.enableTime,\n      enableSeconds: this.enableSeconds,\n      formatDate: this.formatDateFn,\n      hourIncrement: this.hourIncrement,\n      inline: this.inline,\n      maxDate: this.maxDate,\n      minDate: this.minDate,\n      minuteIncrement: this.minuteIncrement,\n      mode: this.mode,\n      nextArrow: this.nextArrow,\n      prevArrow: this.prevArrow,\n      noCalendar: this.noCalendar,\n      /* eslint-disable @typescript-eslint/no-explicit-any */\n      onValueUpdate: (dates: Date[], currentDateString: string, instance: FlatpickrInstance, data?: any) =>\n        this._dispatchHookAsEvent('onValueUpdate', dates, currentDateString, instance, data),\n      onChange: (dates: Date[], currentDateString: string, instance: FlatpickrInstance, data?: any) =>\n        this._dispatchHookAsEvent('onChange', dates, currentDateString, instance, data),\n      onClose: (dates: Date[], currentDateString: string, instance: FlatpickrInstance, data?: any) =>\n        this._dispatchHookAsEvent('onClose', dates, currentDateString, instance, data),\n      onOpen: (dates: Date[], currentDateString: string, instance: FlatpickrInstance, data?: any) =>\n        this._dispatchHookAsEvent('onOpen', dates, currentDateString, instance, data),\n      onReady: (dates: Date[], currentDateString: string, instance: FlatpickrInstance, data?: any) =>\n        this._dispatchHookAsEvent('onReady', dates, currentDateString, instance, data),\n      onMonthChange: (dates: Date[], currentDateString: string, instance: FlatpickrInstance, data?: any) =>\n        this._dispatchHookAsEvent('onMonthChange', dates, currentDateString, instance, data),\n      onYearChange: (dates: Date[], currentDateString: string, instance: FlatpickrInstance, data?: any) =>\n        this._dispatchHookAsEvent('onYearChange', dates, currentDateString, instance, data),\n      /* eslint-enable @typescript-eslint/no-explicit-any */\n      parseDate: this.parseDateFn,\n      position: this.position,\n      shorthandCurrentMonth: this.shorthandCurrentMonth,\n      showMonths: this.showMonths,\n      static: this.static,\n      time_24hr: this.time_24hr,\n      weekNumbers: this.weekNumbers,\n      wrap: this.wrap,\n    };\n  }\n\n  _dispatchHookAsEvent(\n    evtName: string,\n    selectedDates: Date[],\n    currentDateString: string,\n    instance: FlatpickrInstance,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n    data?: any\n  ): void {\n    const evt = new CustomEvent(evtName, {\n      detail: {\n        selectedDates: selectedDates,\n        currentDateString: currentDateString,\n        instance: instance,\n        data: data,\n      },\n    });\n\n    this.dispatchEvent(evt);\n  }\n\n  async initializeComponent(): Promise<void> {\n    if (Object.prototype.hasOwnProperty.call(this, 'destroy')) {\n      this._instance?.destroy();\n    }\n\n    await this.updateComplete;\n\n    const inputElement = this.findInputField();\n    if (inputElement) {\n      this._instance = flatpickr(inputElement, this.getOptions());\n    }\n  }\n\n  /** If lit-flatpickr has a slotted element, it means that the user wants to use their custom input. */\n  findInputField(): HTMLInputElement | null {\n    let inputElement: HTMLInputElement | null = null;\n\n    if (!this._hasSlottedElement) {\n      return this.shadowRoot?.querySelector('input') as HTMLInputElement;\n    }\n\n    // First we check if the slotted element is just light dom HTML\n    inputElement = this.querySelector('input');\n    if (inputElement) {\n      return inputElement as HTMLInputElement;\n    }\n    // If not, we traverse down the slotted element's dom/shadow dom until we\n    // find a dead-end or an input\n    const slottedElement: Element | undefined = this.getSlottedElement();\n    if (typeof slottedElement !== undefined) {\n      inputElement = this.searchWebComponentForInputElement(slottedElement as Element);\n    }\n\n    return inputElement ? (inputElement as HTMLInputElement) : null;\n  }\n\n  /**\n   * Traverse the shadow dom tree and search for input from it\n   * and it's children\n   * */\n  searchWebComponentForInputElement(element: Element): HTMLInputElement | null {\n    let inputElement: HTMLInputElement | null = this.getInputFieldInElement(element);\n    if (inputElement) return inputElement;\n\n    const webComponentsInChildren = this.getWebComponentsInsideElement(element);\n    for (let i = 0; i < webComponentsInChildren.length; i++) {\n      inputElement = this.searchWebComponentForInputElement(webComponentsInChildren[i]);\n      if (inputElement) {\n        break;\n      }\n    }\n    return inputElement;\n  }\n\n  /**\n   * Check if said element's dom tree contains a input element\n   * */\n  getInputFieldInElement(element: Element): HTMLInputElement | null {\n    let inputElement: HTMLInputElement | null = null;\n    if (element.shadowRoot) {\n      inputElement = element.shadowRoot.querySelector('input');\n    } else {\n      inputElement = element.querySelector('input');\n    }\n    return inputElement;\n  }\n\n  getWebComponentsInsideElement(element: Element): Array<Element> {\n    if (element.shadowRoot) {\n      return [\n        ...Array.from(element.querySelectorAll('*')),\n        ...Array.from(element.shadowRoot.querySelectorAll('*')),\n      ].filter((elem: Element) => elem.shadowRoot);\n    } else {\n      return Array.from(element.querySelectorAll('*')).filter((elem: Element) => elem.shadowRoot);\n    }\n  }\n\n  changeMonth(monthNum: number, isOffset = true): void {\n    this._instance?.changeMonth(monthNum, isOffset);\n  }\n\n  clear(): void {\n    this._instance?.clear();\n  }\n\n  close(): void {\n    this._instance?.close();\n  }\n\n  destroy(): void {\n    this._instance?.destroy();\n  }\n\n  formatDate(dateObj: Date, formatStr: string): string {\n    return this._instance?.formatDate(dateObj, formatStr) ?? '';\n  }\n\n  jumpToDate(date: Date, triggerChange: boolean): void {\n    this._instance?.jumpToDate(date, triggerChange);\n  }\n\n  open(): void {\n    this._instance?.open();\n  }\n\n  parseDate(dateStr: string, dateFormat: string): Date | undefined {\n    return this._instance?.parseDate(dateStr, dateFormat);\n  }\n\n  redraw(): void {\n    this._instance?.redraw();\n  }\n\n  set(\n    option:\n      | keyof Options\n      | {\n          [k in keyof Options]?: Options[k];\n        },\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n    value?: any\n  ): void {\n    this._instance?.set(option, value);\n  }\n\n  /** Second and third parameters are optional (as per flatpickr documentation). */\n  setDate(date: DateOption | DateOption[], triggerChange?: boolean, dateStrFormat?: string): void {\n    this._instance?.setDate(date, triggerChange, dateStrFormat);\n  }\n\n  toggle(): void {\n    this._instance?.toggle();\n  }\n\n  getSelectedDates(): Array<Date> {\n    return this._instance?.selectedDates ?? [];\n  }\n\n  getCurrentYear(): number {\n    return this._instance?.currentYear ?? -1;\n  }\n\n  getCurrentMonth(): number {\n    return this._instance?.currentMonth ?? -1;\n  }\n\n  getConfig(): ParsedOptions {\n    return this._instance?.config ?? ({} as ParsedOptions);\n  }\n\n  getValue(): string {\n    return this._instance?.input.value ?? ''; //Or we could check/use findInputField() instead of _instance.input.\n  }\n\n  render(): TemplateResult {\n    return html`\n      ${this._hasSlottedElement ? html`` : html`<input class=\"lit-flatpickr flatpickr flatpickr-input\" />`}\n      <slot></slot>\n    `;\n  }\n}\n"]}